openapi: 3.0.3
info:
  title: KMD.Elements.GisTopology.BFC
  x-maintainers: Team-04
  description: |-
    # KMD Elements Gis Topology BFC
    Stability level: STABLE
    <br/>
    <br/>
    The **KMD Elements Gis Topology BFC** is part of the KMD Element product.<br/>

    ## Capabilities
    The API allows to:
    - get input file upload parameters for existing gis-topology-jobs
    - get processed file download parameters for existing gis-topology-jobs

  termsOfService: "https://www.kmd.net/terms-of-use"

  contact:
    name: KMD Elements
    url: "https://www.kmd.net/en/solutions-and-services/energy-management/kmd-elements"
    email: kmdelements@kmd.dk

  license:
    name: License
    url: "https://www.kmd.net/terms-of-use"

  version: "1.0"

servers:
  - url: "/"
  - url: "/gis-topology-bfc"

security:
  - Jwt: [ ]

tags:
  - name: GisElectricityTopology
    description: API allowing obtaining electricity gis-topology-jobs and marking them as processed or failed.

paths:
  /bfc/v1/electricity-gis-topology-jobs:
    get:
      description: >-
        Get information on all new, pending, processed, and failed topology job.
        Used by the Topology Processor to find the next pending input data to process, including that of finding the last successful processed data to be used for diffing (create change set data).
      summary: Get all gis-topology-jobs
      operationId: getGisTopologyJobs
      x-authorization: GisTopology.Output.Read
      tags:
        - GisElectricityTopology
      parameters:
        - "$ref": "#/components/parameters/CorrelationIdInHeader"
        - "$ref": "#/components/parameters/MessageIdInHeader"
        - "$ref": "#/components/parameters/FromInputFileUploadedTimeInQuery"
      responses:
        '200':
          description: List of all topology gis-topology-jobs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElectricityGisTopologyJobsCollectionResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '499':
          $ref: '#/components/responses/499'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
        '504':
          $ref: '#/components/responses/504'

  /bfc/v1/electricity-gis-topology-jobs/{jobId}/input-data-blob-storage-url:
    get:
      description: Get input blob storage urls for a specific topology job
      summary: Request input data url
      x-authorization: GisTopology.Output.Read
      operationId: getInputDataUrlByJobId
      tags:
        - GisElectricityTopology
      parameters:
        - "$ref": "#/components/parameters/CorrelationIdInHeader"
        - "$ref": "#/components/parameters/MessageIdInHeader"
        - "$ref": "#/components/parameters/JobIdInPath"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputDataBlobStorageUrlResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '499':
          $ref: '#/components/responses/499'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
        '504':
          $ref: '#/components/responses/504'

  /bfc/v1/electricity-gis-topology-jobs/{jobId}/output-data-blob-storage-url:
    get:
      description: Get output blob storage urls for a specific topology job
      summary: Request output data url
      x-authorization: GisTopology.Output.Read
      operationId: getOutputDataUrlByJobId
      tags:
        - GisElectricityTopology
      parameters:
        - "$ref": "#/components/parameters/CorrelationIdInHeader"
        - "$ref": "#/components/parameters/MessageIdInHeader"
        - "$ref": "#/components/parameters/JobIdInPath"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputDataBlobStorageUrlResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '499':
          $ref: '#/components/responses/499'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
        '504':
          $ref: '#/components/responses/504'

  /bfc/v1/electricity-gis-topology-jobs/commands/set-job-status:
    post:
      description: Called by the topology processor when the job is processed. The Topology API must update the the underlying job information with the new status and set finishedProcessingTime to current datetime. Moreover the Topology API must synchronize this call with the get-topology-gis-topology-jobs call. That is, the status must immediately be reflected in the get-topology-gis-topology-jobs response, efter this call has returned ok.
      summary: Publish that the job is finished.
      x-authorization: GisTopology.Output.Write
      operationId: setJobStatus
      tags:
        - GisElectricityTopology
      parameters:
        - "$ref": "#/components/parameters/CorrelationIdInHeader"
        - "$ref": "#/components/parameters/MessageIdInHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetJobStatusRequest'
      responses:
        '202':
          $ref: '#/components/responses/202'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '499':
          $ref: '#/components/responses/499'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
        '504':
          $ref: '#/components/responses/504'

components:
  schemas:
    ElectricityGisTopologyJobsCollectionResponse:
      description: List of all topology gis-topology-jobs
      type: array
      maxItems: 100
      items:
        $ref: '#/components/schemas/TopologyJob'

    InputDataBlobStorageUrlResponse:
      description: Input data blob storage url
      type: object
      additionalProperties: false
      required:
        - inputDataBlobStorageUrl
      properties:
        inputDataBlobStorageUrl:
          description: Topology Processor input. Blob storage url to the CIM archive (Zipped data) container the CIM files (equipment.xml, asset.xml, measurement.xml) the tenant has uploaded.
          type: string
          nullable: false
          pattern: "^.*$"
          maxLength: 1000
          example: 'https://sample-storage-account-name-eba822f3-2f08-466d-987e-59a3ab3c6bc2.blob.core.windows.net/1/input-files/9a896013-836e-4854-aa15-ee3e16384aa0.zip?sv=2020-08-04&ss=b&srt=sco&sp=rwdlacupx&se=2024-10-31T23:59:59Z&st=2024-10-17T00:00:00Z&spr=https&sig=abc123%2Fdef456%2Fghi789%3D'

    OutputDataBlobStorageUrlResponse:
      description: Output data blob storage url
      type: object
      additionalProperties: false
      required:
        - outputDataBlobStorageUrl
      properties:
        outputDataBlobStorageUrl:
          type: string
          nullable: false
          pattern: "^.*$"
          maxLength: 1000
          description: >-
            Topology Processor output. Blob storage url where the topology processor should put the result of its processing.
            If the input data was processed successfully the result will be a zip archive containing:
              A full SMILE topology dataset in geojson file, a SMILE topology diff/changeset file in json format, and various files with error/validating result for the tenant to use for data cleansing and fault finding.
            If the job failed, the archive will only contain error/validating files."
          example: 'https://FAKE-storage-account-name-eba822f3-2f08-466d-987e-59a3ab3c6bc2.blob.core.windows.net/1/output-files/9a896013-836e-4854-aa15-ee3e16384aa0.zip?sv=2020-08-04&ss=b&srt=sco&sp=rwdlacupx&se=2024-10-31T23:59:59Z&st=2024-10-17T00:00:00Z&spr=https&sig=abc123%2Fdef456%2Fghi789%3D'

    SetJobStatusRequest:
      type: object
      additionalProperties: false
      description: Command allowing to set Job status to "Processed" or "Failed" with "FailedReason".
      required:
        - jobId
        - status
      properties:
        jobId:
          type: string
          format: uuid
          nullable: false
          description: Id of the job that has been processed
          example: 23751a83-cae9-44eb-b3ff-50ca1e15c1b8
        status:
          type: string
          enum: [ Processed, Failed ]
          nullable: false
          description: After the topology processor has finished processing the job, the status will be either Processed og Failed.
          example: Processed
        failedReason:
          type: string
          pattern: "^.*$"
          maxLength: 100
          nullable: true
          description: Short description why the job failed - i.e. CIM Schema Validation Failed, Duplicated CIM ids...
          example: CIM Schema Validation Failed

    TopologyJob:
      description: Structure holding information about a topology job, including urls to blob storage and its status
      type: object
      additionalProperties: false
      required:
        - id
        - status
        - createdTime
      properties:
        id:
          description: Unique id (uuid) generated when topology job is requested by the tenant (netselskab). It is used as correlation id between the get-topology-gis-topology-jobs and topology-job-finished calls
          type: string
          format: uuid
          nullable: false
          example: 23751a83-cae9-44eb-b3ff-50ca1e15c1b8
        status:
          type: string
          enum: [ New, Pending, Processed, Failed ]
          nullable: false
          description: When the job is added to the list, status should always initially be set to Pending. After the topology processor has finished processing the job, the status is updated to either Processed og Failed. The job will be set to Failed if the data from the tenant is invalid (i.e. CIM schema validating fails) or validating thresholds fails. Jobs with the status Failed will not be used in the diff (change set data) process.
        createdTime:
          type: string
          format: date-time
          nullable: false
          example: '2024-09-13T10:12:44Z'
          description: The time when the job was created - first request for input file url.
        inputFileUploadedTime:
          type: string
          format: date-time
          nullable: true
          example: '2024-09-13T10:12:44Z'
          description: The time when the tenant has uploaded the input data
        finishedProcessingTime:
          type: string
          format: date-time
          nullable: true
          example: '2024-09-13T10:22:44Z'
          description: The time when Topology Processor has finished processing the input data. Will initially be null. The Topology API will update this field with current datetime when the topology processor calls topology-job-finished.
        files:
          type: array
          nullable: true
          description: A list of files contained in this job.
          maxItems: 10
          items:
            $ref: '#/components/schemas/TopologyFile'
          example:
            [
              {
                "fileType": "AssetFile",
                "fileName": "gis_assets_20240606124401_01.xml"
              },
              {
                "fileType": "EquipmentFile",
                "fileName": "gis_equipment_20240606124401_01.xml"
              },
              {
                "fileType": "MeasurementFile",
                "fileName": "gis_measurement_20240606124401_01.xml"
              }
            ]

    TopologyFile:
      description: Defines the file.
      type: object
      additionalProperties: false
      properties:
        fileType:
          type: string
          description: The type of file.
          pattern: "^(AssetFile|EquipmentFile|MeasurementFile|UpsertFile|DeleteFile)$"
          maxLength: 20
          example: AssetFile
        fileName:
          type: string
          description: The name of the file.
          pattern: "^.*$"
          maxLength: 100
          example: gis_assets_20240606124401_01.xml
      example:
        {
          "fileType": "AssetFile",
          "fileName": "gis_assets_20240606124401_01.xml"
        }

    ProblemDetails:
      title: ProblemDetails
      type: object
      description: >-
        ProblemDetails provides detailed information about an errors that
        occurred during an api call execution.

        This problem object is conform the standard specifications, see
        https://tools.ietf.org/html/rfc7807.
      properties:
        type:
          description: The error type.
          type: string
          pattern: "^.*$"
          nullable: true
          maxLength: 50
          example: https://errors.kmdelements.com/500
        title:
          description: A short, human-readable summary of the problem type.
          type: string
          pattern: "^.*$"
          nullable: true
          maxLength: 200
          example: Error short description
        status:
          description: >-
            The HTTP status code ([RFC7231], Section 6) generated by the origin
            server for this occurrence of the problem.
          type: integer
          format: int32
          nullable: true
          minimum: 100
          maximum: 599
          example: 500
        detail:
          description: A human-readable explanation for what exactly happened (in English).
          type: string
          pattern: "^.*$"
          nullable: true
          maxLength: 200
          example: Description what exactly happened
        instance:
          description: >-
            A URI reference that identifies the specific occurrence of the
            problem. It may or may not yield further information if
            dereferenced.
          type: string
          pattern: "^.*$"
          nullable: true
          maxLength: 200
          example: /resources/1

    ValidationProblemDetails:
      title: ValidationProblemDetails
      description: >-
        ValidationProblemDetails provides detailed information about a
        validation errors that occurred during an api call execution.
      allOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - type: object
          description: Validation error object.
          properties:
            errors:
              type: object
              description: Validation errors.
              additionalProperties:
                type: array
                maxItems: 100
                description: Array of validation error messages.
                items:
                  type: string
                  pattern: "^.*$"
                  maxLength: 5000
              nullable: true
              maxProperties: 100

    DateTimeNullable:
      type: string
      nullable: true
      description: DateTime Nullable.
      format: date-time
      example: "2023-07-01T22:00:00Z"

    Guid:
      type: string
      description: GUID field.
      format: uuid
      example: 23751a83-cae9-44eb-b3ff-50ca1e15c1b8

    GuidNullable:
      nullable: true
      type: string
      description: GUID nullable field.
      format: uuid
      example: 23751a83-cae9-44eb-b3ff-50ca1e15c1b8

  parameters:
    JobIdInPath:
      in: path
      name: jobId
      description: Id to identify the job - Id of the job that has been processed.
      required: true
      schema:
        $ref: '#/components/schemas/Guid'
      example: '3773907e-45a2-11ee-be56-0242ac120003'

    MessageIdInHeader:
      name: es-message-id
      description: Unique message ID. The same message id is used when resending the
        message.
      in: header
      schema:
        $ref: '#/components/schemas/GuidNullable'
      example: '3773907e-45a2-11ee-be56-0242ac120003'
      required: true

    FromInputFileUploadedTimeInQuery:
      name: fromInputFileUploadedTime
      in: query
      description: From Input file uploaded time (the time when the tenant has uploaded the input data) filter.
      schema:
        $ref: '#/components/schemas/DateTimeNullable'
      example: '2024-09-13T10:12:44Z'

    CorrelationIdInHeader:
      name: es-correlation-id
      description: |
        This is used to 'link' messages together. This can be supplied on a request, so
        that the client can correlate a corresponding reply message.
        The server will place the incoming X-Correlation-ID value as the X-Correlation-ID
        on the outgoing reply. If not supplied on the request, the X-Correlation-ID of the
        reply should be set to the value of the X-Message-ID that was used on the request, if present.
        Given that the X-Correlation-ID is used to ‘link’ messages together,
        it may be reused on more than one message.
      in: header
      schema:
        $ref: '#/components/schemas/Guid'
      example: '3773907e-45a2-11ee-be56-0242ac120004'
      required: true

  responses:
    '202':
      description: 202 Accepted.
    '400':
      description: 400 Bad Request.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ValidationProblemDetails'
          examples:
            BadRequestExample:
              value:
                type: https://errors.kmdelements.com/400
                title: Bad Request
                status: 400
                detail: Invalid request
                instance: /resources/1
                errors:
                  name:
                    - name is too long
                  doors:
                    - invalid value
    '401':
      description: 401 Unauthorized.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            UnauthorizedExample:
              value:
                type: https://errors.kmdelements.com/401
                title: Unauthorized
                status: 401
                detail: >-
                  Authorization Token doesn"t satisfy the Token Validation
                  expression.
                instance: /resources/1
    '403':
      description: 403 Forbidden.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            ForbiddenExample:
              value:
                type: https://errors.kmdelements.com/403
                title: Forbidden
                status: 403
                detail: User is not authorized to access this resource.
                instance: /resources/1
    '404':
      description: 404 Not Found.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            NotFoundExample:
              value:
                type: https://errors.kmdelements.com/404
                title: Not Found
                status: 404
                detail: Not Found
                instance: /resources/1
    '429':
      description: 429 Too Many Requests
      headers:
        Retry-After:
          description: Number of seconds until you should try again.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 36000
            example: 360
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            TooManyRequestsExample:
              value:
                type: https://errors.kmdelements.com/429
                title: Too Many Requests
                status: 360
                detail: Rate limit is exceeded.
                instance: /resources/1
    '499':
      description: 499 Client Closed Request.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            NotFoundExample:
              value:
                type: https://errors.kmdelements.com/499
                title: Client Closed Request
                status: 499
                detail: Client Closed Request
                instance: /resources/1
    '500':
      description: 500 Internal Server Error.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            InternalServerErrorExample:
              value:
                type: https://errors.kmdelements.com/500
                title: Internal Server Error
                status: 500
                detail: 'body.0.age: Value `Not Int` does not match format `int32`'
                instance: /resources/1
    '503':
      description: 503 Service Unavailable.
      headers:
        Retry-After:
          description: Number of seconds until you should try again.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 36000
            example: 360
    '504':
      description: 504 Gateway Timeout.
  securitySchemes:
    Jwt:
      description: >-
        JWT Authorization header using the Bearer scheme.
        Example:
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
      type: http
      scheme: bearer
      bearerFormat: JWT
