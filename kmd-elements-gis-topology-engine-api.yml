openapi: 3.0.3
info:
  title: Topology  API
  x-maintainers: Integration-Team
  description: |-
    Topology API to be implemented by KMD. The Topology Processor implemented by DAX will call the endpoint get-topology-jobs to get information about which data is ready to be processed. When finished processing the input data, the Topology Processor will call the topology-job-finished endpoint.

  termsOfService: "https://www.kmd.net/terms-of-use"

  contact:
    name: KMD Elements
    url: "https://www.kmd.net/en/solutions-and-services/energy-management/kmd-elements"
    email: kmdelements@kmd.dk

  license:
    name: License
    url: "https://www.kmd.net/terms-of-use"

  version: "0.2"

servers:
  - url: "https://localhost:16003"
    description: Localhost

security:
  - Jwt: []

tags:
  - name: GIS Topology
    description: API that is responsible for maintaining attachments for business objects

paths:
  /v1/gis-topology/jobs:
    get:
      description: Get information on all pending, processed, and failed topology job. Used by the Topology Processor to find the next pending input data to process, including that of finding the last succesfull processed data to be used for diffing (create change set data).
      summary: Get all jobs
      operationId: getGisTopologyJobs
      x-authorization: GIS.read
      tags:
        - GIS Topology
      parameters:
        - "$ref": "#/components/parameters/CorrelationIdInHeader"
        - "$ref": "#/components/parameters/MessageIdInHeader"
        - "$ref": "#/components/parameters/SequenceNumberInQuery"
      responses:
        '200':
          description: List of all topology jobs
          content:
            application/json:
              schema:
                description: List of all topology jobs
                type: array
                maxItems: 50
                items:
                    $ref: '#/components/schemas/TopologyJob'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '499':
          $ref: '#/components/responses/499'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
        '504':
          $ref: '#/components/responses/504'

  /v1/gis-topology/jobs/{jobId}/request-input-data-url:
    get:
      description: Get input blog storage urls for a specific topology job
      summary: Request input data url
      x-authorization: GIS.read
      operationId: getInputDataUrlByJobId
      tags:
        - GIS Topology
      parameters:
        - "$ref": "#/components/parameters/CorrelationIdInHeader"
        - "$ref": "#/components/parameters/MessageIdInHeader"
        - "$ref": "#/components/parameters/JobIdInPath"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Blob storage urls
                type: object
                properties:
                  inputDataBlobStorageUrl:
                    type: string
                    pattern: ""
                    maxLength: 256
                    nullable: false
                    description: Topology Processor input. Blob storage url to the CIM archive (Zipped data) container the CIM files (equipment.xml, asset.xml, measurement.xml) the tenant has uploaded.
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '499':
          $ref: '#/components/responses/499'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
        '504':
          $ref: '#/components/responses/504'
  /v1/gis-topology/jobs/{jobId}/request-output-data-url:
    get:
      description: Get  output blog storage urls for a specific topology job
      summary: Request output data url
      x-authorization: GIS.read
      operationId: getOutputDataUrlByJobId
      tags:
        - GIS Topology
      parameters:
        - "$ref": "#/components/parameters/CorrelationIdInHeader"
        - "$ref": "#/components/parameters/MessageIdInHeader"
        - "$ref": "#/components/parameters/JobIdInPath"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: Blob storage urls
                type: object
                properties:
                  outputDataBlobStorageUrl:
                    type: string
                    nullable: false
                    pattern: ""
                    maxLength: 256
                    description: "Topology Processor output. Blob storage url where the topology processor should put the result of its processing. If the input data was processed successfully the result will be a zip archive containing: A full SMILE topology dataset in geojson file, a SMILE topology diff/changeset file in json format, and various files with error/validating result for the tenant to use for data cleansing and fault finding. If the job failed, the archive will only contain error/validating files."
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '499':
          $ref: '#/components/responses/499'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
        '504':
          $ref: '#/components/responses/504'

  /v1/gis-topology/jobs/{jobId}/finished:
    post:
      description: Called by the topology processor when the job is processed. The Topology API must update the the underlying job information with the new status and set finishedProcessingTime to current datetime. Moreover the Topology API must synchronize this call with the get-topology-jobs call. That is, the status must immediately be reflected in the get-topology-jobs response, efter this call has returned ok.
      summary: Publish that the job is finished.
      x-authorization: GIS.read
      operationId: publishJobFinished
      tags:
        - GIS Topology
      parameters:
        - "$ref": "#/components/parameters/CorrelationIdInHeader"
        - "$ref": "#/components/parameters/MessageIdInHeader"
        - "$ref": "#/components/parameters/JobIdInPath"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jobId:
                  type: string
                  format: uuid
                  nullable: false
                  description: Id of the job that has been processed
                status:
                  type: string
                  enum: [PROCESSED, FAILED]
                  nullable: false
                  description: After the topology processer has finished processing the job, the status will be either PROCESSED og FAILED.
                failedReason:
                  type: string
                  pattern: ""
                  maxLength: 100
                  nullable: true
                  description: Short description why the job failed - i.e. CIM Shema Validation Failed, Dublicated CIM ids...


      responses:
        '202':
          $ref: '#/components/responses/202'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '499':
          $ref: '#/components/responses/499'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
        '504':
          $ref: '#/components/responses/504'

components:
  schemas:
    TopologyJob:
      type: object
      nullable: true
      description: Structure holding information about a topology job, including urls to blob storage and its status
      properties:
        id:
          type: string
          format: uuid
          nullable: false
          description: Unique id (uuid) generated when topology job is requested by the tenant (netselskab). It is used as correlation id between the get-topology-jobs and topology-job-finished calls
        seqNo:
          type: integer
          format: int32
          nullable: false
          minimum: 0
          maximum: 2147483647
          description: Sequence number that should be incremented everytime a topology job is inserted in the list - i.e. everytime the tenant sends a new set of CIM data to be topology processed. The sequence number is used for ordering and to catch up eventually missing outputs.
        status:
          type: string
          enum: [PENDING, PROCESSED, FAILED]
          nullable: false
          description: When the job is added to the list, status should always initially be set to PENDING. After the topology processor has finished processing the job, the status is updated to either PROCESSED og FAILED. The job will be set to FAILED if the data from the tenant is invalid (i.e. CIM schema validating fails) or validating thresholds fails. Jobs with the status FAILED will not be used in the diff (change set data) process.
        createdTime:
          type: string
          format: date-time
          nullable: false
          example: '2024-09-13T10:12:44Z'
          description: The time when the tenant has uploaded the input data
        finishedProcessingTime:
          type: string
          format: date-time
          nullable: true
          example: '2024-09-13T10:22:44Z'
          description: The time when Topology Processor has finished processing the input data. Will initially be null. The Topology API will update this field with current datetime when the topology processor calls topology-job-finished.

    ProblemDetails:
      title: ProblemDetails
      type: object
      description: >-
        ProblemDetails provides detailed information about an errors that
        occurred during an api call execution.

        This problem object is conform the standard specifications, see
        https://tools.ietf.org/html/rfc7807.
      properties:
        type:
          description: The error type.
          type: string
          pattern: "^.*$"
          nullable: true
          maxLength: 50
          example: https://errors.kmdelements.com/500
        title:
          description: A short, human-readable summary of the problem type.
          type: string
          pattern: "^.*$"
          nullable: true
          maxLength: 200
          example: Error short description
        status:
          description: >-
            The HTTP status code ([RFC7231], Section 6) generated by the origin
            server for this occurrence of the problem.
          type: integer
          format: int32
          nullable: true
          minimum: 100
          maximum: 599
          example: 500
        detail:
          description: A human-readable explanation for what exactly happened (in English).
          type: string
          pattern: "^.*$"
          nullable: true
          maxLength: 200
          example: Description what exactly happened
        instance:
          description: >-
            A URI reference that identifies the specific occurrence of the
            problem. It may or may not yield further information if
            dereferenced.
          type: string
          pattern: "^.*$"
          nullable: true
          maxLength: 200
          example: /resources/1
    ValidationProblemDetails:
      title: ValidationProblemDetails
      description: >-
        ValidationProblemDetails provides detailed information about a
        validation errors that occurred during an api call execution.
      allOf:
        - $ref: '#/components/schemas/ProblemDetails'
        - type: object
          description: Validation error object.
          properties:
            errors:
              type: object
              description: Validation errors.
              additionalProperties:
                type: array
                maxItems: 100
                description: Array of validation error messages.
                items:
                  type: string
                  pattern: "^.*$"
                  maxLength: 5000
              nullable: true
              maxProperties: 100

  parameters:
    JobIdInPath:
      in: path
      name: jobId
      description: Id to identify the job
      required: true
      schema:
        type: string
        format: uuid
        description: Id of the job that has been processed
      example: '3773907e-45a2-11ee-be56-0242ac120003'
    SequenceNumberInQuery:
      in: query
      description: Returns all jobs with a sequence number greather that fromSequenceNumber. If parameter is not specified then all jobs are returned.
      name: fromSequenceNumber
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 2147483647
      example: 1
    MessageIdInHeader:
      name: es-message-id
      description: Unique message ID. The same message id is used when resending the
        message.
      in: header
      schema:
        type: string
        format: uuid
      example: '3773907e-45a2-11ee-be56-0242ac120003'
      required: true
    CorrelationIdInHeader:
      name: es-correlation-id
      description: |
        This is used to 'link' messages together. This can be supplied on a request, so
        that the client can correlate a corresponding reply message.
        The server will place the incoming X-Correlation-ID value as the X-Correlation-ID
        on the outgoing reply. If not supplied on the request, the X-Correlation-ID of the
        reply should be set to the value of the X-Message-ID that was used on the request, if present.
        Given that the X-Correlation-ID is used to ‘link’ messages together,
        it may be reused on more than one message.
      in: header
      schema:
        type: string
        format: uuid
      example: '3773907e-45a2-11ee-be56-0242ac120004'
      required: true

  responses:
    '202':
      description: 202 Accepted.
    '400':
      description: 400 Bad Request.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ValidationProblemDetails'
          examples:
            BadRequestExample:
              value:
                type: https://errors.kmdelements.com/400
                title: Bad Request
                status: 400
                detail: Invalid request
                instance: /resources/1
                errors:
                  name:
                    - name is too long
                  doors:
                    - invalid value
    '401':
      description: 401 Unauthorized.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            UnauthorizedExample:
              value:
                type: https://errors.kmdelements.com/401
                title: Unauthorized
                status: 401
                detail: >-
                  Authorization Token doesn"t satisfy the Token Validation
                  expression.
                instance: /resources/1
    '403':
      description: 403 Forbidden.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            ForbiddenExample:
              value:
                type: https://errors.kmdelements.com/403
                title: Forbidden
                status: 403
                detail: User is not authorized to access this resource.
                instance: /resources/1
    '404':
      description: 404 Not Found.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            NotFoundExample:
              value:
                type: https://errors.kmdelements.com/404
                title: Not Found
                status: 404
                detail: Not Found
                instance: /resources/1
    '429':
      description: 429 Too Many Requests
      headers:
        Retry-After:
          description: Number of seconds until you should try again.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 36000
            example: 360
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            TooManyRequestsExample:
              value:
                type: https://errors.kmdelements.com/429
                title: Too Many Requests
                status: 360
                detail: Rate limit is exceeded.
                instance: /resources/1
    '499':
      description: 499 Client Closed Request.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            NotFoundExample:
              value:
                type: https://errors.kmdelements.com/499
                title: Client Closed Request
                status: 499
                detail: Client Closed Request
                instance: /resources/1
    '500':
      description: 500 Internal Server Error.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
          examples:
            InternalServerErrorExample:
              value:
                type: https://errors.kmdelements.com/500
                title: Internal Server Error
                status: 500
                detail: 'body.0.age: Value `Not Int` does not match format `int32`'
                instance: /resources/1
    '503':
      description: 503 Service Unavailable.
      headers:
        Retry-After:
          description: Number of seconds until you should try again.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 36000
            example: 360
    '504':
      description: 504 Gateway Timeout.
  securitySchemes:
    Jwt:
      description: >-
        JWT Authorization header using the Bearer scheme.

        Example:
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
      type: http
      scheme: bearer
      bearerFormat: JWT
